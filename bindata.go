// Code generated by go-bindata.
// sources:
// locales/locale_en-US.ini
// locales/locale_zh-CN.ini
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xb1\x6a\x33\x31\x10\x84\x7b\x3d\xc5\xfc\xc5\x75\xff\x13\x04\x54\x85\x90\x14\xe9\xae\x34\x26\xc8\xf2\x9e\xb4\x20\xed\x0a\x6b\x2f\xe6\xde\x3e\x48\x31\x21\xa9\xc4\x68\x60\xbe\x6f\x33\x95\xa2\xf0\x78\x1b\xef\x7f\x2c\xfd\x9f\x8b\x39\x48\xa2\x8f\x12\x24\xc1\xe3\x79\x26\x58\x26\x8c\x9f\x3d\x24\x82\x6e\x58\x3a\x4c\xf1\x22\x89\x4b\xcf\xee\x94\xa9\xb4\xb3\x33\xb6\x42\xf0\xa3\xec\x7b\x6b\x7a\x33\x44\xad\x35\xc8\xb5\xbb\xcc\xf0\x58\xc3\x81\x6f\xa2\x29\x0e\xdd\x5d\xe3\x08\x8f\x57\xb2\x09\xb8\x05\xb9\x6a\x45\xad\x68\x1c\x9d\x71\x1d\x63\x6b\xd6\xfb\x6c\x67\xd6\x0d\xef\x1a\x83\xb1\xca\xd3\x69\xe9\x67\x5c\x0e\xd4\xea\x3a\xd9\xc3\x77\x7d\x6c\xfd\x95\x75\x8d\x67\xfb\x43\xa2\x56\x0e\x70\x47\x53\x49\xb8\x67\x92\x21\xad\x52\x58\xc8\x8d\x63\x7e\x83\xc3\x45\x3f\x09\x2c\x9b\x7e\x05\x00\x00\xff\xff\x17\x2a\x05\x5b\x2e\x01\x00\x00")

func localesLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_localesLocale_enUsIni,
		"locales/locale_en-US.ini",
	)
}

func localesLocale_enUsIni() (*asset, error) {
	bytes, err := localesLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/locale_en-US.ini", size: 302, mode: os.FileMode(420), modTime: time.Unix(1529849348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesLocale_zhCnIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x6a\xc2\x50\x18\x84\xf7\xef\x14\x0f\x21\xc7\xc8\x49\x44\x8a\x48\x30\x81\x54\x03\xc9\x01\xb4\x08\xa2\xa8\xad\x55\x9a\x12\x83\x58\x30\xc5\x2e\x4c\x94\x4a\x9b\xc6\xbc\x78\x99\xff\xff\x5f\xb2\xca\x15\x4a\xb4\x8b\x6e\x67\x86\x99\x6f\x74\xcd\x34\xbb\x5c\xe5\x20\x36\x18\x88\x32\x9d\x28\x76\x99\xf6\x59\x4b\x6f\x76\xda\xda\x9d\xd9\xec\xb4\xb9\xca\x15\x5b\x7a\x83\x3c\xda\xe7\xbb\x1e\xad\x4e\xb4\xfc\x81\x38\x91\x61\x0f\xc4\x02\xe2\x3d\xbd\x0c\x59\x5d\xd7\x4c\xab\xc1\x1c\xc3\x31\xb5\x6b\x9e\x96\x11\x4d\xfa\xd2\x1b\xe0\x5c\xc0\x79\xcb\x74\x83\xab\x1c\x9f\xe6\x20\x36\x85\x1b\x62\x20\x98\x65\xb4\xb8\xca\xf3\xd9\x37\x66\x6e\xe1\x3d\x92\x9f\x48\x6f\x20\xb3\x19\x06\x9f\xb8\xca\xe4\x68\xc8\x1c\xe3\xbe\x2a\x93\xcb\xe3\x4d\x86\x38\x01\xb1\xa1\xe7\x3d\x8d\x03\x1a\xf5\xd0\xdf\xa1\x7f\xa8\x2b\x76\xa3\x9a\x11\x0b\x1c\x4d\xc9\xfd\x2a\xdc\x13\xb3\x35\xe7\x0f\x3c\x0f\x33\x29\xc2\x7f\xf8\xcc\x32\xae\x06\xbe\x3f\xd0\xda\x57\x6c\xf4\x77\x32\xb9\x94\xe9\x04\x0f\x47\x48\xbd\x1b\x0e\xae\xd6\xb8\x9d\xd6\xac\x6e\xa7\x5d\x63\xd5\x33\xae\x72\x7a\xcd\xe4\x36\x81\x73\x00\xf1\x18\xe3\x10\xc7\x1f\x70\x79\xa3\x7e\xc4\x7e\x03\x00\x00\xff\xff\x53\xc0\xce\x34\x41\x01\x00\x00")

func localesLocale_zhCnIniBytes() ([]byte, error) {
	return bindataRead(
		_localesLocale_zhCnIni,
		"locales/locale_zh-CN.ini",
	)
}

func localesLocale_zhCnIni() (*asset, error) {
	bytes, err := localesLocale_zhCnIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/locale_zh-CN.ini", size: 321, mode: os.FileMode(420), modTime: time.Unix(1529849333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/locale_en-US.ini": localesLocale_enUsIni,
	"locales/locale_zh-CN.ini": localesLocale_zhCnIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"locale_en-US.ini": &bintree{localesLocale_enUsIni, map[string]*bintree{}},
		"locale_zh-CN.ini": &bintree{localesLocale_zhCnIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

