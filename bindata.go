// Code generated by go-bindata.
// sources:
// locales/locale_en-US.ini
// locales/locale_zh-CN.ini
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x41\x8a\xc3\x30\x0c\x45\xf7\x3e\xc5\x9f\xc5\xec\xe6\x0a\x5e\xcc\x0c\x85\xde\xa1\x94\xe2\x38\xaa\x25\x50\x24\x13\xbb\x0d\xb9\x7d\x89\x0b\x5d\x09\xbd\x07\xef\x33\xa9\x3a\x22\xce\xc7\xfd\xc1\x77\xfb\x0a\x99\x93\x15\xba\x69\xb2\x82\x88\xff\xf1\xe1\x57\x24\xef\x7f\xde\x71\xe0\x47\x2a\x84\xee\x38\x59\x11\x6d\x1c\x2e\x4c\x5a\xaf\x81\x05\x11\xef\xe0\xe6\xab\xce\xa1\x4a\x46\x44\xa1\x8e\xce\x84\x35\xd9\xec\x0b\x96\x05\x55\x72\xa8\x32\xf2\x1f\x49\x55\x77\x48\x43\x75\x2b\xd8\x98\x6c\xe0\xc9\x3b\xdc\x54\x8c\xc2\xb1\x81\x88\xc6\xbe\x0d\x95\x26\x7f\x12\xc4\xee\xfe\x0a\x00\x00\xff\xff\x1c\x11\xe9\x74\xc4\x00\x00\x00")

func localesLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_localesLocale_enUsIni,
		"locales/locale_en-US.ini",
	)
}

func localesLocale_enUsIni() (*asset, error) {
	bytes, err := localesLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/locale_en-US.ini", size: 196, mode: os.FileMode(420), modTime: time.Unix(1529847122, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesLocale_zhCnIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x4d\x4a\xc3\x40\x18\x00\xd0\xfd\x9c\x62\x28\x78\x8c\x2c\xf4\x1a\x22\x52\x42\x48\x06\x42\x92\x85\x1b\x77\xad\x04\x8a\x25\xd6\x85\x5a\x75\x12\x8a\x42\x23\x71\xd1\x56\x51\x70\x1c\x93\xf4\x32\xdf\x4f\x5c\xe5\x0a\xa2\x6e\x7a\x81\xf7\x02\x2f\x0c\x63\xe9\x48\x68\x1e\xb0\x6c\xfa\x3a\xdb\xeb\xeb\xb1\x70\x83\x61\xe4\x7b\xc7\xe1\x30\xf2\xa5\x23\xf7\x95\x72\x4f\x0f\xe2\x13\xd6\x69\xb7\x59\x75\xd5\x88\xf2\x77\xba\xfe\x04\x63\x79\x3d\x82\xe6\x0a\xcc\x8a\xe6\x13\x71\x18\x78\x61\x72\x24\x02\xb5\xcb\x81\x99\xf3\x4d\x26\x12\xe5\x4a\x47\x76\xb3\x0f\x6c\x6f\xbf\xf5\x25\x15\x96\x75\xca\xed\x0c\xcb\x37\xcc\x5b\x3e\x9f\x88\x44\xfd\x5d\xf8\x74\x46\x8b\x82\x0a\x8b\xf7\x15\x58\x8b\x45\xc5\x76\xdb\xd7\x19\xbe\xbc\x42\xad\xff\x01\xcc\x17\xb8\xbc\x18\x24\x71\xe4\x0f\xc4\x6f\x2a\x1d\x49\x77\x2d\x2f\x2d\x7c\x95\x60\xa6\xac\x53\x34\x6b\x9c\x3e\xc3\xf6\x91\xc6\x9b\x9f\x00\x00\x00\xff\xff\x2b\xd9\x6e\xae\xe3\x00\x00\x00")

func localesLocale_zhCnIniBytes() ([]byte, error) {
	return bindataRead(
		_localesLocale_zhCnIni,
		"locales/locale_zh-CN.ini",
	)
}

func localesLocale_zhCnIni() (*asset, error) {
	bytes, err := localesLocale_zhCnIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/locale_zh-CN.ini", size: 227, mode: os.FileMode(420), modTime: time.Unix(1529847165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/locale_en-US.ini": localesLocale_enUsIni,
	"locales/locale_zh-CN.ini": localesLocale_zhCnIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"locale_en-US.ini": &bintree{localesLocale_enUsIni, map[string]*bintree{}},
		"locale_zh-CN.ini": &bintree{localesLocale_zhCnIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

