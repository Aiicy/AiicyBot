// Code generated by go-bindata.
// sources:
// locales/locale_en-US.ini
// locales/locale_zh-CN.ini
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xb1\x4a\x05\x31\x10\x45\xfb\x7c\xc5\xb5\xd8\xce\x2f\x10\x52\xa8\x08\x16\x76\x96\x8f\x87\x64\xb3\xf3\x92\x81\xc9\x4c\xd8\xcc\x73\xd9\xbf\x97\x5d\xd1\x6a\xb8\x77\xe0\xdc\x53\x49\xc4\x10\xf1\x7e\xdc\x47\x4c\xe3\x21\xe4\x9a\xb4\xd0\x97\x24\x2d\x88\x78\x3d\x13\x9e\x99\xf3\xfe\x62\x8e\xa3\xbe\xa7\x42\x70\xc3\x9b\x16\x96\x51\xc3\xa5\x92\xf4\x6b\x70\x76\x21\x44\x4c\x03\xe3\xde\xbb\xad\x8e\x6c\xad\x25\x5d\x46\xa8\x8c\x88\xdf\xb1\xcd\x56\x59\x42\xe7\x8c\x88\x42\x0e\xaf\x84\x35\xe9\x62\x0d\xad\xa1\x73\x0e\xce\xed\xe0\x7c\x56\xdb\xce\xef\x99\xed\x86\x0f\xcb\xc9\xd9\xf4\xe9\x32\x8d\x2b\xe6\x1d\xad\x85\xce\xa7\xe6\x3f\x88\xba\xec\xe0\x81\x6e\x5a\xb0\x55\xd2\xb3\x9e\xcd\x61\x2a\xac\x14\x0e\x57\x44\x8c\x3f\x78\x9a\xed\x9b\xc0\x7a\xb3\x9f\x00\x00\x00\xff\xff\x79\x06\xf7\xa8\x0c\x01\x00\x00")

func localesLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_localesLocale_enUsIni,
		"locales/locale_en-US.ini",
	)
}

func localesLocale_enUsIni() (*asset, error) {
	bytes, err := localesLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/locale_en-US.ini", size: 268, mode: os.FileMode(420), modTime: time.Unix(1529848146, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesLocale_zhCnIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcf\x4f\x6a\xc2\x40\x18\x05\xf0\xfd\x9c\x62\x10\x3c\x46\x16\xed\x35\x44\x8a\x48\x30\x03\xa9\x06\xcc\xa6\x3b\x2d\x82\x28\xd1\xd2\x6a\xb5\x8d\x41\x2c\x98\x92\x2e\xfc\x47\xa5\x9d\x8e\x99\x78\x99\xef\xfb\x46\x57\x5e\xa1\x58\x37\xdd\xbe\xc5\xfb\xbd\xe7\xd8\xae\x5b\xe3\x16\x07\x3d\xc3\x58\x9f\xd2\x20\x5f\x3f\xa5\x4d\x56\x76\x4a\xd5\x8a\x7d\xe3\x96\xaa\x15\x6e\xf1\x2b\x21\xca\x77\xd7\x35\xdf\x84\xad\xc3\x6a\x71\x48\x1a\x34\xd9\xd2\xf0\x07\xa4\x32\xcb\x06\xe8\x01\xc8\x05\x8d\xda\xac\xe0\xd8\xae\x57\x64\xbe\xf0\x5d\x9b\x5b\x3c\x5f\xa7\xe1\x8a\x82\xa6\x09\x5b\xf8\xa8\x61\x37\x67\x8e\xf8\x2f\x81\x1c\x99\xe7\x80\x79\xa2\xcc\x2d\x7e\xe8\x7f\x63\x36\x3e\x86\x0f\x14\x29\x13\xb6\x4c\xd6\xc7\xf8\x13\x27\x99\xe9\xb4\x99\x2f\x6e\xcf\x7d\x66\xb8\xb9\xc4\x20\x15\xe8\x19\x3d\x2d\xa8\x1b\x53\xa7\x81\x51\x82\xd1\xba\x90\xaf\x17\xcf\x92\x1e\x60\xa7\x47\xe3\xaf\xe3\x78\xcb\x3c\xf1\x37\x1f\xdf\xef\x69\x1a\x51\xa4\xf0\x35\x01\xa5\x30\x4a\x8c\xda\x9f\xd2\x00\xd7\x1b\x48\xc3\x8b\x8c\x93\x29\xce\x7b\x39\xaf\x56\xad\xe4\xd8\xf9\x07\xb7\x38\xbd\x64\x66\xae\x60\x17\x83\xec\xa2\x5c\x62\xf7\x03\xf6\x6f\xd4\x5c\xb1\xdf\x00\x00\x00\xff\xff\x4f\x35\x44\x13\x35\x01\x00\x00")

func localesLocale_zhCnIniBytes() ([]byte, error) {
	return bindataRead(
		_localesLocale_zhCnIni,
		"locales/locale_zh-CN.ini",
	)
}

func localesLocale_zhCnIni() (*asset, error) {
	bytes, err := localesLocale_zhCnIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/locale_zh-CN.ini", size: 309, mode: os.FileMode(420), modTime: time.Unix(1529848280, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/locale_en-US.ini": localesLocale_enUsIni,
	"locales/locale_zh-CN.ini": localesLocale_zhCnIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"locale_en-US.ini": &bintree{localesLocale_enUsIni, map[string]*bintree{}},
		"locale_zh-CN.ini": &bintree{localesLocale_zhCnIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

